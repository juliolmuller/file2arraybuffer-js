{"version":3,"sources":["index.js","dist.js"],"names":["toArrayBuffer","target","Promise","ReferenceError","ArrayBuffer","reject","Error","constructor","resolve","Blob","String","el","document","querySelector","HTMLInputElement","files","FileList","length","File","FileReader","TypeError","reader","onloadend","ev","result","onerror","error","readAsArrayBuffer","module","exports","window","require"],"mappings":"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","file":"to-arraybuffer.js","sourceRoot":"..\\src","sourcesContent":["\r\n/**\r\n * Generate the Array Buffer object for target reference provided as parameter.\r\n *\r\n * @param {String|HTMLInputElement|FileList|File|ArrayBuffer|Blob} target\r\n * @return {Promise<ArrayBuffer>}\r\n */\r\nconst toArrayBuffer = (target) => {\r\n\r\n  if (typeof Promise === 'undefined') {\r\n    throw new ReferenceError('Your environment does not support Promises.')\r\n  } else if (typeof ArrayBuffer === 'undefined') {\r\n    throw new ReferenceError('Your environment does not support ArrayBuffer.')\r\n  }\r\n\r\n  if (!target) {\r\n    return Promise.reject(new Error(`Parameter to convert to ArrayBuffer is empty (value: '${target}').`))\r\n  }\r\n\r\n  if (target.constructor === ArrayBuffer) {\r\n    return Promise.resolve(target)\r\n  }\r\n\r\n  if (typeof Blob !== 'undefined' && target.constructor === Blob) {\r\n    return target.toArrayBuffer()\r\n  }\r\n\r\n  if (target.constructor === String) {\r\n    const el = document.querySelector(target)\r\n    if (!el) {\r\n      return Promise.reject(new Error(`No HTML found with selector \"${target}\".`))\r\n    }\r\n    target = el\r\n  }\r\n\r\n  if (typeof HTMLInputElement !== 'undefined' && target.constructor === HTMLInputElement) {\r\n    if (!target.files) {\r\n      return Promise.reject(new Error('HTML input element reference is not of type \"file\".'))\r\n    }\r\n    target = target.files\r\n  }\r\n\r\n  if (typeof FileList !== 'undefined' && target.constructor === FileList) {\r\n    if (target.length === 0) {\r\n      return Promise.reject(new Error('Object FileList is empty.'))\r\n    }\r\n    target = target[0]\r\n  }\r\n\r\n  if (typeof File !== 'undefined' && target.constructor === File) {\r\n    if (typeof FileReader === 'undefined') {\r\n      throw new TypeError('Your environment does not support FileReader.')\r\n    }\r\n    const reader = new FileReader()\r\n    return new Promise((resolve, reject) => {\r\n      reader.onloadend = (ev) => resolve(ev.target.result)\r\n      reader.onerror = (ev) => reject(ev.target.error)\r\n      reader.readAsArrayBuffer(target)\r\n    })\r\n  }\r\n\r\n  return Promise.reject(new Error('Parameter type must be an instance of HTMLInputElement, FileList, File, String (input selector), Blob or ArrayBuffer'))\r\n}\r\n\r\nmodule.exports = toArrayBuffer\r\n","window.toArrayBuffer = require('./index')\n"]}