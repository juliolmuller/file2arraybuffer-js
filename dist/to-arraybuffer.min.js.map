{"version":3,"sources":["index.js","dist.js"],"names":["toArrayBuffer","target","Promise","ReferenceError","ArrayBuffer","reject","Error","constructor","resolve","Blob","String","el","document","querySelector","HTMLInputElement","files","FileList","length","File","FileReader","TypeError","reader","onloadend","ev","result","onerror","error","readAsArrayBuffer","module","exports","window","require"],"mappings":";AAOA,IAAMA,EAAgB,SAACC,GAEjB,GAAmB,oBAAZC,QACH,MAAA,IAAIC,eAAe,+CACpB,GAA2B,oBAAhBC,YACV,MAAA,IAAID,eAAe,kDAGvB,IAACF,EACIC,OAAAA,QAAQG,OAAO,IAAIC,MAA+DL,yDAAAA,OAAAA,EAAlF,SAGLA,GAAAA,EAAOM,cAAgBH,YAClBF,OAAAA,QAAQM,QAAQP,GAGrB,GAAgB,oBAATQ,MAAwBR,EAAOM,cAAgBE,KACjDR,OAAAA,EAAOD,gBAGZC,GAAAA,EAAOM,cAAgBG,OAAQ,CAC3BC,IAAAA,EAAKC,SAASC,cAAcZ,GAC9B,IAACU,EACIT,OAAAA,QAAQG,OAAO,IAAIC,MAAsCL,gCAAAA,OAAAA,EAAzD,QAETA,EAASU,EAGP,GAA4B,oBAArBG,kBAAoCb,EAAOM,cAAgBO,iBAAkB,CAClF,IAACb,EAAOc,MACHb,OAAAA,QAAQG,OAAO,IAAIC,MAAM,wDAElCL,EAASA,EAAOc,MAGd,GAAoB,oBAAbC,UAA4Bf,EAAOM,cAAgBS,SAAU,CAClEf,GAAkB,IAAlBA,EAAOgB,OACFf,OAAAA,QAAQG,OAAO,IAAIC,MAAM,8BAElCL,EAASA,EAAO,GAGd,GAAgB,oBAATiB,MAAwBjB,EAAOM,cAAgBW,KAAM,CAC1D,GAAsB,oBAAfC,WACH,MAAA,IAAIC,UAAU,iDAEhBC,IAAAA,EAAS,IAAIF,WACZ,OAAA,IAAIjB,QAAQ,SAACM,EAASH,GAC3BgB,EAAOC,UAAY,SAACC,GAAOf,OAAAA,EAAQe,EAAGtB,OAAOuB,SAC7CH,EAAOI,QAAU,SAACF,GAAOlB,OAAAA,EAAOkB,EAAGtB,OAAOyB,QAC1CL,EAAOM,kBAAkB1B,KAItBC,OAAAA,QAAQG,OAAO,IAAIC,MAAM,0HAGlCsB,OAAOC,QAAU7B;;AChEjB8B,OAAO9B,cAAgB+B,QAAQ","file":"to-arraybuffer.min.js","sourceRoot":"..\\src","sourcesContent":["\r\n/**\r\n * Generate the Array Buffer object for target reference provided as parameter.\r\n *\r\n * @param {String|HTMLInputElement|FileList|File|ArrayBuffer|Blob} target\r\n * @return {Promise<ArrayBuffer>}\r\n */\r\nconst toArrayBuffer = (target) => {\r\n\r\n  if (typeof Promise === 'undefined') {\r\n    throw new ReferenceError('Your environment does not support Promises.')\r\n  } else if (typeof ArrayBuffer === 'undefined') {\r\n    throw new ReferenceError('Your environment does not support ArrayBuffer.')\r\n  }\r\n\r\n  if (!target) {\r\n    return Promise.reject(new Error(`Parameter to convert to ArrayBuffer is empty (value: '${target}').`))\r\n  }\r\n\r\n  if (target.constructor === ArrayBuffer) {\r\n    return Promise.resolve(target)\r\n  }\r\n\r\n  if (typeof Blob !== 'undefined' && target.constructor === Blob) {\r\n    return target.toArrayBuffer()\r\n  }\r\n\r\n  if (target.constructor === String) {\r\n    const el = document.querySelector(target)\r\n    if (!el) {\r\n      return Promise.reject(new Error(`No HTML found with selector \"${target}\".`))\r\n    }\r\n    target = el\r\n  }\r\n\r\n  if (typeof HTMLInputElement !== 'undefined' && target.constructor === HTMLInputElement) {\r\n    if (!target.files) {\r\n      return Promise.reject(new Error('HTML input element reference is not of type \"file\".'))\r\n    }\r\n    target = target.files\r\n  }\r\n\r\n  if (typeof FileList !== 'undefined' && target.constructor === FileList) {\r\n    if (target.length === 0) {\r\n      return Promise.reject(new Error('Object FileList is empty.'))\r\n    }\r\n    target = target[0]\r\n  }\r\n\r\n  if (typeof File !== 'undefined' && target.constructor === File) {\r\n    if (typeof FileReader === 'undefined') {\r\n      throw new TypeError('Your environment does not support FileReader.')\r\n    }\r\n    const reader = new FileReader()\r\n    return new Promise((resolve, reject) => {\r\n      reader.onloadend = (ev) => resolve(ev.target.result)\r\n      reader.onerror = (ev) => reject(ev.target.error)\r\n      reader.readAsArrayBuffer(target)\r\n    })\r\n  }\r\n\r\n  return Promise.reject(new Error('Parameter type must be an instance of HTMLInputElement, FileList, File, String (input selector), Blob or ArrayBuffer'))\r\n}\r\n\r\nmodule.exports = toArrayBuffer\r\n","window.toArrayBuffer = require('./index')\n"]}